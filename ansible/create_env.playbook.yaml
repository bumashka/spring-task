- name: run local terraform
  hosts: localhost
  connection: local
  tasks:
    - name: Run terraform
      terraform:
        project_path: "../terraform"
        force_init: yes
        state: present
      register: trfrm

    - name: Add movie_bot_server
      add_host:
        name: movie_bot_server
        groups: nodes
        ansible_host: "{{ trfrm.outputs.servers.value.movie_bot_server }}"
        ansible_ssh_private_key_file: ~/.ssh/id_rsa
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        
    - name: Add movie_bot_client
      add_host:
        name: movie_bot_client
        groups: nodes
        ansible_host: "{{ trfrm.outputs.servers.value.movie_bot_client}}"
        ansible_ssh_private_key_file: ~/.ssh/id_rsa
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

- name: Timeout for instance creating
  hosts: localhost
  connection: local     
  tasks:
    - name: Wait for server port 22
      wait_for:
        host: "{{ trfrm.outputs.servers.value.movie_bot_server }}"
        port: 22

    - name: Wait for client port 22
      wait_for:
        host: "{{ trfrm.outputs.servers.value.movie_bot_client }}"
        port: 22

- name: Configure database host
  hosts: movie_bot_server
  become: yes

  vars:
    db_name: "postgres"
    db_user: "postgres"
    db_password: "pass"

  pre_tasks:
    - name: "Install packages"
      dnf: "name={{ item }} state=present"
      with_items:
        - postgresql
        - postgresql-server

    - name: "Install Python packages"
      pip: "name={{ item }}  state=present"
      with_items:
        - psycopg2-binary

  tasks:
    - name: "Find out if PostgreSQL is initialized"
      ansible.builtin.stat:
        path: "/var/lib/pgsql/data/pg_hba.conf"
      register: postgres_data

    - name: "Initialize PostgreSQL"
      shell: "postgresql-setup initdb"
      when: not postgres_data.stat.exists

    - name: "Start and enable services"
      service: "name={{ item }} state=started enabled=yes"
      with_items:
        - postgresql

    - name: "Create app database"
      postgresql_db:
        state: present
        name: "{{ db_name }}"
      become: yes
      become_user: postgres

    - name: "Create db user"
      postgresql_user:
        state: present
        name: "{{ db_user }}"
        password: "{{ db_password }}"
      become: yes
      become_user: postgres

    - name: "Grant db user access to app db"
      postgresql_privs:
        type: database
        database: "{{ db_name }}"
        roles: "{{ db_user }}"
        grant_option: no
        privs: all
      become: yes
      become_user: postgres

    - name: "Allow md5 connection for the db user"
      postgresql_pg_hba:
        dest: "~/data/pg_hba.conf"
        contype: host
        databases: all
        method: md5
        users: "{{ db_user }}"
        create: true
      become: yes
      become_user: postgres
      notify: restart postgres

    - name: "Copy sql import script"
      copy:
          src: "{{ sql_path }}"
          dest: /home/ubuntu

    - name: "Execute script from variable"
      command: "psql {{ db_name }} -c home/ubuntu/init.sql"
      become_user: postgres
      register: sql_response_variable

  handlers:
    - name: restart postgres
      service: name=postgresql state=restarted

- hosts: movie_bot_client
  name: Deploy application
  become: true

  os_environment:
    - key: MOVIE_BOT_SERVER
      value: "{{ trfrm.outputs.servers.value.movie_bot_server }}"

  tasks:
    - name: populate /etc/environment
      lineinfile:
        path: "/etc/environment"
        state: present
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value}}"

      with_items: "{{ os_environment }}"
      become: yes

    - name: Update apt package cache
      apt:
        update_cache: yes

    - name: Install JDK 17
      apt:
        name: openjdk-17-jdk
        state: present

    - name: Copy jar archive
      copy:
        src: "{{ jar_path }}"
        dest: /home/ubuntu/

    - name: Set application as service
      copy:
        src: "{{ client_service }}"
        dest: /etc/systemd/system/

    - name: Deploy Java application
      systemd:
        daemon_reload: true
        state: restarted
        name: my_java_client

- hosts: movie_bot_server
  name: Deploy application server
  become: true

  tasks:
    - name: Update apt package cache
      apt:
        update_cache: yes

    - name: Install JDK 17
      apt:
        name: openjdk-17-jdk
        state: present

    - name: Copy jar archive
      copy:
        src: "{{ jar_path }}"
        dest: /home/ubuntu/

    - name: Set application as service
      copy:
        src: "{{ server_service }}"
        dest: /etc/systemd/system/

    - name: Deploy Java application
      systemd:
        daemon_reload: true
        state: restarted
        name: my_java_app