- name: run local terraform
  hosts: localhost
  connection: local
  tasks:
    - name: Run terraform
      terraform:
        project_path: "../terraform"
        force_init: yes
        state: present
      register: trfrm

    - name: Add movie_bot_server
      add_host:
        name: movie_bot_server
        groups: nodes
        ansible_host: "{{ trfrm.outputs.servers.value.movie_bot_server }}"
        ansible_ssh_private_key_file: ~/.ssh/key.txt
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        
    - name: Add movie_bot_client
      add_host:
        name: movie_bot_client
        groups: nodes
        ansible_host: "{{ trfrm.outputs.servers.value.movie_bot_client}}"
        ansible_ssh_private_key_file: ~/.ssh/key.txt
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

- name: Timeout for instance creating
  hosts: localhost
  connection: local     
  tasks:
    - name: Wait for server port 22
      wait_for:
        host: "{{ trfrm.outputs.servers.value.movie_bot_server }}"
        port: 22

    - name: Wait for client port 22
      wait_for:
        host: "{{ trfrm.outputs.servers.value.movie_bot_client }}"
        port: 22

- name: Configure database host
  hosts: movie_bot_server
  become: yes

  vars:
    db_name: "postgres"
    db_user: "postgres"
    db_password: "pass"

  handlers:
    - name: Restart PostgreSQL
      ansible.builtin.systemd:
        name: postgresql
        state: restarted

  tasks:
    - name: Update apt package cache
      apt:
        update_cache: yes

    - name: Install PSQL and Psycopg2
      apt:
        name:
          - postgresql
          - python3-psycopg2
        state: present

    - name: Install PSQL-client
      apt:
        name:
          - postgresql-client-common
        state: present

    - name: Configure PostgreSQL
      ansible.builtin.template:
        src: ./pg_hba.conf
        dest: /etc/postgresql/14/main/pg_hba.conf
        owner: postgres
        group: postgres
        mode: 0640

    - name: Start and enable the service
      ansible.builtin.systemd:
        name: postgresql
        state: restarted
        enabled: true

    - name: Set options
      community.postgresql.postgresql_set:
        name: "listen_addresses"
        value: "*"
      become: yes
      notify:
        - Restart PostgreSQL

    - name: Create the database
      community.postgresql.postgresql_db:
        name: "{{ db_name }}"
        encoding: "UTF-8"
      become: true

    - name: Create database user
      community.postgresql.postgresql_user:
        state: present
        name: "{{ db_user }}"
        password: "{{ db_password }}"
      become: yes

    - name: Grant user access to db
      community.postgresql.postgresql_privs:
        type: database
        database: "{{ db_name }}"
        roles: "{{ db_user }}"
        grant_option: no
        privs: all
      become: yes

#    - name: "Copy sql import script"
#      copy:
#          src: "{{ sql_path }}"
#          dest: /home/ubuntu
#
#    - name: "Execute script from variable"
#      command: "psql {{ db_name }} -c home/ubuntu/init.sql"
#      become_user: postgres
#      register: sql_response_variable

- name: Fill db from backup
  hosts: localhost
  vars:
    db_name: "postgres"
    db_user: "postgres"
    db_password: "pass"
  tasks:
    - name: Execute backup script
      community.postgresql.postgresql_db:
        login_host: "{{ trfrm.outputs.servers.value.movie_bot_server }}"
        db: "{{ db_name }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        target: "../init.sql"
        state: restore

- name: Deploy application
  hosts: movie_bot_client
  become: true

#  vars:
#    key: "MOVIE_BOT_SERVER"
#    value: "{{ trfrm.outputs.servers.value.movie_bot_server }}"
#
  tasks:
#    - name: populate /etc/environment
#      lineinfile:
#        path: "/etc/environment"
#        state: present
#        regexp: "^{{ key }}="
#        line: "{{ key }}={{ value}}"
#
#    - name: Update apt package cache
#      apt:
#        update_cache: yes

    - name: Install JDK 18
      apt:
        name: openjdk-18-jdk
        state: present

    - name: Copy jar archive
      copy:
        src: "{{ jar_path }}"
        dest: /home/ubuntu/

    - name: Set application as service
      copy:
        src: "{{ client_service }}"
        dest: /etc/systemd/system/

    - name: Deploy Java application
      systemd:
        daemon_reload: true
        state: restarted
        name: my_java_client

- hosts: movie_bot_server
  name: Deploy application server
  become: true

  tasks:
    - name: Update apt package cache
      apt:
        update_cache: yes

    - name: Install JDK 18
      apt:
        name: openjdk-18-jdk
        state: present

    - name: Copy jar archive
      copy:
        src: "{{ jar_path }}"
        dest: /home/ubuntu/

    - name: Set application as service
      copy:
        src: "{{ server_service }}"
        dest: /etc/systemd/system/

    - name: Deploy Java application
      systemd:
        daemon_reload: true
        state: restarted
        name: my_java_app